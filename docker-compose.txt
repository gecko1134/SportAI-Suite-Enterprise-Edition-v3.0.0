version: '3.8'

services:
  sportai-app:
    build: .
    container_name: sportai-suite
    ports:
      - "8501:8501"
    environment:
      - APP_ENV=production
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///database/sportai.db}
      - SESSION_TIMEOUT=${SESSION_TIMEOUT:-3600}
      - MAX_LOGIN_ATTEMPTS=${MAX_LOGIN_ATTEMPTS:-5}
    volumes:
      - ./database:/app/database
      - ./logs:/app/logs
      - ./audit_logs:/app/audit_logs
      - ./configurations:/app/configurations
      - ./uploads:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sportai-network
    depends_on:
      - redis
      - postgres

  redis:
    image: redis:7-alpine
    container_name: sportai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-sportai2025}
    restart: unless-stopped
    networks:
      - sportai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: sportai-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-sportai}
      - POSTGRES_USER=${POSTGRES_USER:-sportai_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-sportai_pass}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - sportai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sportai_user}"]
      interval: 30s
      timeout: 3s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: sportai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/usr/share/nginx/html/static:ro
    depends_on:
      - sportai-app
    restart: unless-stopped
    networks:
      - sportai-network

  backup:
    image: alpine:latest
    container_name: sportai-backup
    volumes:
      - ./database:/database:ro
      - ./backups:/backups
      - ./scripts:/scripts:ro
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
    command: >
      sh -c "
        apk add --no-cache dcron bash postgresql-client &&
        echo '${BACKUP_SCHEDULE:-0 2 * * *} /scripts/backup.sh' | crontab - &&
        crond -f -l 2
      "
    restart: unless-stopped
    networks:
      - sportai-network

  prometheus:
    image: prom/prometheus:latest
    container_name: sportai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    networks:
      - sportai-network

  grafana:
    image: grafana/grafana:latest
    container_name: sportai-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - sportai-network

networks:
  sportai-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data: